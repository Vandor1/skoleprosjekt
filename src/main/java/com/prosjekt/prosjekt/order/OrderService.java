package com.prosjekt.prosjekt.order;

import com.prosjekt.prosjekt.item.Item;
import com.prosjekt.prosjekt.item.ItemRepository;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

/**
 * Class - OrderService
 */
@Service
@AllArgsConstructor
public class OrderService{
    private final OrderRepository orderRepository;
    private final ItemRepository itemRepository;


    /**
     * Delete cart item
     * @param itemId
     * @param userId
     */
    public void deleteCartItem(Long userId, Long itemId) {
        Order cartItems = getCartItems(userId);
        Optional<Item> itemById = itemRepository.findItemById(itemId);

        if(itemById.isPresent()){
            if (!cartItems.getItems().contains(itemById.get())) {
                throw new IllegalStateException("Cant find item with id: " + itemId + ".");
            } else {
                cartItems.deleteItemFromOrder(itemById.get());
                orderRepository.save(cartItems);
            }
        }
    }

    /**
     * Collects the current items in cart.
     * @param userId of the user ID.
     * @return orders of the cart.
     */
    public Order getCartItems(Long userId) {
        Optional<Order> order = getUserCart(userId);
        return order.orElse(null);

    }

    /**
     * Change "orderstatus" from "CART" -> "ORDER" to signal
     * that this user has registered an order.
     * @param userID of the users cart we are "checkouting".
     */
    public void checkOutOrder(Long userID){
        Optional<Order> order = getUserCart(userID);
        order.ifPresent(value -> {
            value.setOrderStatus(OrderStatus.ORDER);
            value.setDate(LocalDate.now());
            orderRepository.save(order.get());
        });
        //TODO: LOGGER
    }

    /**
     * Find all orders by a given userID.
     * @param userId the ID of the user queried.
     * @return a list of orders generated by the user provided by the ID.
     */
    public List<Order> getOrdersByUserId(Long userId){
        return orderRepository.findOrdersByUserId(userId);
    }

    /**
     * Get all orders. TESTING METHOD. TODO: REMOVE
     * @return all orders in the database.
     */
    public List<Order> getOrders(){
        return orderRepository.findAll();
    }

    /**
     * Add to order, method meant to first check if the the user has an active orderlist,
     * or if another needs to be created. If the item and user exists, the item will be
     * added to the either existing list, or the generated list.
     * @param userId id of the user's cart to update.
     * @param itemId id of the item to add to the cart.
     */
    public void addToOrder(Long userId, Long itemId){
        Order order;
        Optional<Item> itemToAdd = itemRepository.findItemById(itemId);
        if(getUserCart(userId).isPresent() && itemToAdd.isPresent()){
             order = getUserCart(userId).get();
             order.addItemToOrder(itemToAdd.get());
             orderRepository.save(order);
        } else if (getUserCart(userId).isEmpty()) {
            order = new Order(userId);
            order.addItemToOrder(itemToAdd.get());
            orderRepository.save(order);
        }
    }

    public void createCart(Long userId){
        if(getUserCart(userId).isEmpty()){
            Order order = new Order(userId);
            orderRepository.save(order);
        }
    }

    /**
     * Collects the user with userID cart.
     * @param userId the ID of the user who's shopping.
     * @return orders with id=userID and OrderStatus=CART.
     */
    private Optional<Order> getUserCart(Long userId){
        return orderRepository.findOrderByUserIdAndOrderStatus(userId, OrderStatus.CART);
    }
}
