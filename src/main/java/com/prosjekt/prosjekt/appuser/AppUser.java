package com.prosjekt.prosjekt.appuser;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.persistence.*;
import java.util.Collection;
import java.util.Collections;

/**
 * Class AppUser - entity class for an AppUser. Defines the fields of an AppUser, alongside overridden fields
 * from the implemented standardized UserDetails interface.
 * This is an Entity class so it is mapped to the database with its own table AppUsers, all these app users are unique in this table.
 */
@Getter
@Setter
@EqualsAndHashCode
@NoArgsConstructor
@Entity
public class AppUser implements UserDetails {
    //IDs are generated by the sequence generator automatically, meaning each ID will be unique and added in a sequence.
    @SequenceGenerator(
            name = "user_sequence",
            sequenceName = "user_sequence",
            allocationSize = 1
    )
    @Id
    @GeneratedValue(
            strategy = GenerationType.SEQUENCE,
            generator = "user_sequence"
    )

    private Long id;
    private String name;
    private String email;
    private String password;
    @Enumerated(EnumType.STRING)
    private AppUserRole appUserRole; // AppUserRole is fetched from enumerated AppUserRole class.
    private Boolean locked=false;
    private Boolean enabled=true;

    public AppUser(String name,
                   String email,
                   String password,
                   AppUserRole appUserRole){
        this.name = name;
        this.email = email;
        this.password = password;
        this.appUserRole = appUserRole;
    }

    /**
     * Used to define which actions are allowed for the user with these "authorities".
     * @return collection of authorities or collection with a single authority.
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        SimpleGrantedAuthority authority =
                new SimpleGrantedAuthority(appUserRole.name());
        return Collections.singletonList(authority);
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return email;
    }

    public String getName(){return name;}

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return !locked;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }
}
